﻿// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML;

namespace DiabatesPredictor
{
    public partial class MLModel
    {
        public static ITransformer RetrainPipeline(MLContext context, IDataView trainData)
        {
            var pipeline = BuildPipeline(context);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"Pregnancies", @"Pregnancies"),new InputOutputColumnPair(@"Glucose", @"Glucose"),new InputOutputColumnPair(@"BloodPressure", @"BloodPressure"),new InputOutputColumnPair(@"SkinThickness", @"SkinThickness"),new InputOutputColumnPair(@"Insulin", @"Insulin"),new InputOutputColumnPair(@"BMI", @"BMI"),new InputOutputColumnPair(@"DiabetesPedigreeFunction", @"DiabetesPedigreeFunction"),new InputOutputColumnPair(@"Age", @"Age")})      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"Pregnancies",@"Glucose",@"BloodPressure",@"SkinThickness",@"Insulin",@"BMI",@"DiabetesPedigreeFunction",@"Age"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(@"Outcome", @"Outcome"))      
                                    .Append(mlContext.Transforms.NormalizeMinMax(@"Features", @"Features"))      
                                    .Append(mlContext.MulticlassClassification.Trainers.LbfgsMaximumEntropy(l1Regularization:0.03125F,l2Regularization:0.111144846218694F,labelColumnName:@"Outcome",featureColumnName:@"Features"))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(@"PredictedLabel", @"PredictedLabel"));

            return pipeline;
        }
    }
}
